/*
 * TCSS 305 - Spring 2016
 * Assignment 6 - Tetris
 */

package view;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import model.Board;
import model.Point;
import model.TetrisPiece;

/**
 * The user interface for Tetris.
 * 
 * @author Danielle Lambion
 * @version 24 May 2016
 */
public class TetrisGUI extends JFrame implements Observer
{
    /** 
     * The default delay (in milliseconds) for the timer. 
     */
    public static final int DEFAULT_DELAY = 1000;

    /**
     * A generated serial version UID for object Serialization.
     */
    private static final long serialVersionUID = 106474944905625785L;
    
    /**
     * The panel that displays the game board.
     */
    private final GamePanel myTetris;
    
    /**
     * The panel that displays a preview of the next tetris piece.
     */
    private final PreviewPanel myPreview;
    
    /**
     * The timer to move pieces during the game.
     */
    private final Timer myTimer;
    
    /**
     * Menu bar for buttons, such as, start, pause, and controls.
     */
    private final JMenuBar myMenu;
    
    /**
     * An instance of the Board class, representing the Tetris board.
     */
    private final Board myBoard;
    
    /**
     * A list of TetrisBlocks, which contain the locations of the blocks to make up 
     * the pieces on the board.
     */
    private final List<TetrisBlock> myBlockPoints;
    
    /**
     * A list of TetrisBlocks, which contain the locations of the blocks to make up 
     * the preview piece.
     */
    private final List<TetrisBlock> myPreviewPoints;    

    /**
     * Constructor for the entire GUI for Tetris.
     */
    public TetrisGUI() 
    {
        super("TETRIS");
        myBlockPoints = new ArrayList<TetrisBlock>();
        myPreviewPoints = new ArrayList<TetrisBlock>();
        myBoard = new Board();
        myMenu = new JMenuBar();
        myTetris = new GamePanel(myBlockPoints);
        myPreview = new PreviewPanel();
        addKeyListener(new KeyboardActions(myBoard));
        generateFrame();
        myTimer = new Timer(DEFAULT_DELAY, theAction ->
        {
            myBoard.step();
        });
    }
    
    /**
     * Generates and makes the GUI visible for Tetris.
     */
    public void start()
    {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        myBoard.addObserver(this);
        myBoard.newGame();
        myTimer.start();
        pack();
        setResizable(false);
        setVisible(true);
    }
    
    
    /**
     * Generates the frame with buttons and panels.
     */
    private void generateFrame()
    {
        final JMenuItem ctrls = new JMenuItem("Game Controls");
        ctrls.addActionListener(theEvent ->
        {
            final String message = "Move Left: \u2190\nMoveRight: \u2192\nMove Down: \u2193\n"
                            + "Rotate Clockwise: X\nRotate Counterclockwise: Z\n"
                            + "Drop: Spacebar";
            JOptionPane.showMessageDialog(new JFrame(), message, "Controls", 
                                          JOptionPane.INFORMATION_MESSAGE);
        });
        myMenu.add(ctrls);
        setJMenuBar(myMenu);
        add(myPreview, BorderLayout.EAST);
        add(myTetris, BorderLayout.CENTER);
    }

    @Override
    public void update(final Observable arg0, final Object arg1) 
    {
        if (arg1 instanceof String)
        {
            myBlockPoints.clear();
            String boardString = ((String) arg1).substring((myBoard.getWidth() + 3) * 5 - 1);
            boardString = boardString.replace("|", "");
            boardString = boardString.replace("-", "");
            boardString = boardString.replace("\n", "");
            for (int i = 0; i < boardString.length(); i++)
            {
                if (boardString.charAt(i) != ' ')
                {
                    myBlockPoints.add(new TetrisBlock((i % 10) * myTetris.getWidth() / 10, 
                                                     (i / 10) * myTetris.getHeight() / 20));
                }
            }
            myTetris.updatePoints(myBlockPoints);
        }
        if (arg1 instanceof Boolean)
        {
            final String message = "Game Over";
            JOptionPane.showMessageDialog(new JFrame(), message, "You Have Lost", 
                                        JOptionPane.INFORMATION_MESSAGE);
        }
        
        if (arg1 instanceof TetrisPiece)
        {
            myPreviewPoints.clear();
            for (final Point point: ((TetrisPiece) arg1).getPoints())
            {
                if (((TetrisPiece) arg1).toString().equals("I"))
                {
                    myPreviewPoints.add(new TetrisBlock(point.x() * 25 + 28, point.y() * -25 + 115));
                }
                else if (((TetrisPiece) arg1).toString().equals("O"))
                {
                    myPreviewPoints.add(new TetrisBlock(point.x() * 25 + 28, point.y() * -25 + 100));
                }
                else
                {
                    myPreviewPoints.add(new TetrisBlock(point.x() * 25 + 40, point.y() * -25 + 100));
                }
            }
            myPreview.updatePoints(myPreviewPoints);
        }
    }

}
